
Дано дерево задач с одним корнем. Узлами дерева являются группы задач, листьми - сами задачи. Внутри
группы могут содержаться либо другие группы, либо задачи, но не то и другое одновременно. Каждый элемент
дерева имеет уникальный идентификатор id (неотрицательное целое число) и название name (строка).
Дополнительно задачи имеют приоритет priority (неотрицательное целое число), а группы задач приоритета
не имеют. Необходимо реализовать функцию findTaskHavingMaxPriorityInGroup, в которую передается дерево
задач и идентификатор группы. Она должна найти задачу с наибольшим приоритетом среди всех из этой
группы (включая те из них, которые находятся во вложенных группах). Если не удалось найти группу с
указанным идентификатором, функция должна генерировать исключение. Если в группе нет ни одной задачи,
должно возвращаться неопределенное значение (undefined в JavaScript, None в Python, nullptr в C++ и null в
Kotlin).

Пример:

Допустим, имеется дерево задач

* id = 0, name = "Все задачи"
   * id = 1, name = "Разработка"
      * id = 2, name = "Планирование разработок", priority = 1
      * id = 3, name = "Подготовка релиза", priority = 4
   * id = 4, name = "Аналитика"

Отступами обозначается вложенность групп задач. Это дерево содержит три группы ("Все задачи", "Разработка"
и "Аналитика"), а также две задачи ("Планирование разработок" и "Подготовка релиза"). Для этого дерева
вызов функции findTaskHavingMaxPriorityInGroup c номером группы

* 0 - должен вернуть задачу "Подготовка релиза" (имеет максимальный приоритет 4)
* 3 - сгенерировать исключение (не является группой)
* 5 - сгенерировать исключение (группа не существует)
- 4 - вернуть неопределенное значение (в группе нет ни одной задачи)